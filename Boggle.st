'From Pharo10.0.0 of 15 March 2023 [Build information: Pharo-10.0.0+build.538.sha.179ef655ae2b150009a860b127aa3605366659ca (64 Bit)] on 25 February 2024 at 2:35:09.8 am'!Object subclass: #Boggle	instanceVariableNames: 'prefixes'	classVariableNames: ''	package: 'CPS506'!!Boggle methodsFor: 'as yet unclassified' stamp: 'AvneetSidhu 2/25/2024 02:29'!dfs: m value: current value: visited value: words value: word    | w x y newLetter s |    w := word.    x := current at: 2.    y := current at: 1.         (visited includes: (y @ x))    ifTrue: [^words].    newLetter := ((m at: y) at: x).	(prefixes includesKey: w)	ifFalse: [^ 1].     w := word,(String with: newLetter).        visited add: (y @ x).    words at: w put: visited asArray.    s := OrderedCollection new.    "can move down"    y + 1 <= (m size)    ifTrue: [s add: ( {y+1. x} value ) ].        "can move up"    y - 1 >= 1    ifTrue: [s add: ( {y-1. x} value ) ].        "can move right"    x + 1 <= (m size)    ifTrue: [s add: ( {y. x+1} value ) ].        "can move left"    x - 1 >= 1    ifTrue: [s add: ( {y. x-1} value ) ].         "can move bottom right"    (y + 1 <= (m size) and: [x + 1 <= (m size)])    ifTrue: [s add: ( {y + 1. x+1} value ) ].    "can move bottom left"    (y + 1 <= (m size) and: [x - 1 >= 1])    ifTrue: [s add: ( {y + 1. x - 1} value ) ].    "can move top right"    (y - 1 >= 1 and: [x + 1 <= (m size)])    ifTrue: [s add: ( {y - 1. x+1} value ) ].    "can move top left"    (y - 1 >= 1 and: [x - 1 >= 1])    ifTrue: [s add: ( {y - 1. x-1} value ) ].        s do: [:move | self dfs: m value: move value: visited copy value: words value: w ].       ! !!Boggle methodsFor: 'as yet unclassified' stamp: 'AvneetSidhu 2/25/2024 02:30'!getPrefixes  ^prefixes.! !!Boggle methodsFor: 'initialization' stamp: 'AvneetSidhu 2/25/2024 02:29'!setPrefixes: words max: r	| builder |	prefixes := Dictionary new.	words do: [:word |				((word size) <= (r * r))		ifTrue: [		builder := WriteStream on: String new.		word do: [:char | 			builder nextPut: char. 			prefixes at: builder contents put: 1.		].						]		 ].	prefixes at: '' put: 1.! !!Boggle methodsFor: 'initialization' stamp: 'AvneetSidhu 2/25/2024 02:29'!setPrefixes: words	| builder |	prefixes := Dictionary new.	words do: [:word |		builder := WriteStream on: String new.		word do: [:char | 			builder nextPut: char. 			prefixes at: builder contents put: 1.			]		 ].	prefixes at: '' put: 1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Boggle class	instanceVariableNames: ''!!Boggle class methodsFor: 'as yet unclassified' stamp: 'AvneetSidhu 2/25/2024 02:31'!search: board for: words    | myDict v b r c toReturn |   r := board size.   c := board size.   myDict := Dictionary new.	toReturn := Dictionary new.	   b := self new.	b setPrefixes: words max: r.	    1 to: r do: [:row  |         1 to: r do: [:col |             v := OrderedCollection new.            b dfs: board value: ( {row. col} value )  value: v value: myDict value: ''.				].        ].			toReturn := Dictionary new. 		words do: [:word | 		(word size) <= (r * c)		ifTrue: [			(myDict includesKey: word)			ifTrue: [toReturn at: word put: (myDict at: word)]			].		 ].	   ^toReturn.													! !